"use strict";(self.webpackChunkspark_ensemble=self.webpackChunkspark_ensemble||[]).push([[150],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,d=u["".concat(c,".").concat(m)]||u[m]||f[m]||i;return r?n.createElement(d,o(o({ref:t},p),{},{components:r})):n.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1459:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={id:"stacking",title:"Stacking"},c=void 0,l={unversionedId:"stacking",id:"stacking",title:"Stacking",description:"Stacking (Stacked Generalization) is a meta-algorithm introduced by David H. Wolpert [1] that involves training a learning algorithm to combine the predictions of several other learning algorithms.",source:"@site/../spark-ensemble-docs/target/mdoc/stacking.md",sourceDirName:".",slug:"/stacking",permalink:"/spark-ensemble/docs/stacking",draft:!1,editUrl:"https://github.com/pierrenodet/spark-ensemble/edit/master/docs/stacking.md",tags:[],version:"current",frontMatter:{id:"stacking",title:"Stacking"},sidebar:"someSidebar",previous:{title:"Boosting",permalink:"/spark-ensemble/docs/boosting"},next:{title:"GBM",permalink:"/spark-ensemble/docs/gbm"}},p={},u=[{value:"Parameters",id:"parameters",level:2},{value:"References",id:"references",level:2}],f={toc:u},m="wrapper";function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)(m,(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Stacking (Stacked Generalization) is a meta-algorithm introduced by David H. Wolpert [",(0,i.kt)("a",{parentName:"p",href:"#references"},"1"),"] that involves training a learning algorithm to combine the predictions of several other learning algorithms."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"The parameters available for Stacking are related to the base and stack learner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.ml.classification.{StackingClassifier, RandomForestClassifier, DecisionTreeClassifier}\n\nnew StackingClassifier()\n        .setBaseLearners(Array(new DecisionTreeClassifier(), new RandomForestClassifier())) //Base learners used by the meta-estimator.\n        .setStackMethod("proba") //Methods called for each base learner, only for classification.\n        .setStacker(new DecisionTreeClassifier()) //Learner that will combine the predictions of base learners.\n        .setParallelism(4) //Number of base learners trained simultaneously.\n')),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[",(0,i.kt)("a",{parentName:"li",href:"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.133.8090&rep=rep1&type=pdf"},"1"),"] David H. Wolpert (1992) Stacked Generalization")))}d.isMDXComponent=!0}}]);