"use strict";(self.webpackChunkspark_ensemble=self.webpackChunkspark_ensemble||[]).push([[829],{3905:function(e,t,r){r.d(t,{Zo:function(){return g},kt:function(){return u}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},g=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),c=p(r),u=a,f=c["".concat(l,".").concat(u)]||c[u]||m[u]||i;return r?n.createElement(f,o(o({ref:t},g),{},{components:r})):n.createElement(f,o({ref:t},g))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},7617:function(e,t,r){r.r(t),r.d(t,{assets:function(){return g},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={id:"bagging",title:"Bagging"},l=void 0,p={unversionedId:"bagging",id:"bagging",title:"Bagging",description:"Bagging (Bootstrap aggregating) is a meta-algorithm introduced by Breiman [1] that generates multiple versions of a predictor and uses these to get an aggregated predictor.",source:"@site/../spark-ensemble-docs/target/mdoc/bagging.md",sourceDirName:".",slug:"/bagging",permalink:"/spark-ensemble/docs/bagging",draft:!1,editUrl:"https://github.com/pierrenodet/spark-ensemble/edit/master/docs/bagging.md",tags:[],version:"current",frontMatter:{id:"bagging",title:"Bagging"},sidebar:"someSidebar",previous:{title:"Overview",permalink:"/spark-ensemble/docs/overview"},next:{title:"Boosting",permalink:"/spark-ensemble/docs/boosting"}},g={},m=[{value:"Parameters",id:"parameters",level:2},{value:"References",id:"references",level:2}],c={toc:m};function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Bagging (Bootstrap aggregating) is a meta-algorithm introduced by Breiman [",(0,i.kt)("a",{parentName:"p",href:"#references"},"1"),"] that generates multiple versions of a predictor and uses these to get an aggregated predictor."),(0,i.kt)("p",null,"The Random Subspace Method is another meta-algorithm proposed by Ho [",(0,i.kt)("a",{parentName:"p",href:"#references"},"2"),"] that performs the same transformations as Bagging but on the feature space."),(0,i.kt)("p",null,"Combining these two methods is called SubBag and is designed by Pance Panov and Saso Dzeroski [",(0,i.kt)("a",{parentName:"p",href:"#references"},"3"),"]."),(0,i.kt)("p",null,"Here the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaggingClassifier")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaggingRegressor")," implement the SubBag meta-estimator."),(0,i.kt)("p",null,"For classification, ",(0,i.kt)("inlineCode",{parentName:"p"},"BaggingClassificationModel")," uses a majority vote of the base model predictions.\nIt can be either ",(0,i.kt)("inlineCode",{parentName:"p"},"soft")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"hard"),", using the predicted classes or the predicted probabilities of each base model."),(0,i.kt)("p",null,"For regression, ",(0,i.kt)("inlineCode",{parentName:"p"},"BaggingRegressionModel")," uses the average of the base model predictions."),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"The parameters available for Bagging are related to the number of base learners and the randomness of the subbag method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import org.apache.spark.ml.classification.{BaggingClassifier, DecisionTreeClassifier}\nimport org.apache.spark.ml.regression.{BaggingRegressor, DecisionTreeRegressor}\n\nnew BaggingClassifier()\n        .setBaseLearner(new DecisionTreeClassifier()) //Base learner used by the meta-estimator.\n        .setNumBaseLearners(10) //Number of base learners.\n        .setSubsampleRatio(0.8) //Ratio sampling of examples.\n        .setReplacement(true) //Exemples drawn with replacement or not.\n        .setSubspaceRatio(0.8) //Ratio sampling of features.\n        .setVotingStrategy("soft") //Soft or Hard majority vote.\n        .setParallelism(4) //Number of base learners trained simultaneously.\n\nnew BaggingRegressor()\n        .setBaseLearner(new DecisionTreeRegressor()) //Base learner used by the meta-estimator.\n        .setNumBaseLearners(10) //Number of base learners.\n        .setSubsampleRatio(0.8) //Sampling ratio of examples.\n        .setReplacement(true) //Exemples drawn with replacement or not.\n        .setSubspaceRatio(0.8) //Sampling ratio of features.\n        .setParallelism(4) //Number of base learners trained simultaneously.\n')),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"[",(0,i.kt)("a",{parentName:"li",href:"https://www.stat.berkeley.edu/~breiman/bagging.pdf"},"1"),"] Leo Breiman (1994) Bagging Predictors"),(0,i.kt)("li",{parentName:"ul"},"[",(0,i.kt)("a",{parentName:"li",href:"https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=709601"},"2"),"] Tin Kam Ho (1998) The Random Subspace Method for Constructing Decision Forests"),(0,i.kt)("li",{parentName:"ul"},"[",(0,i.kt)("a",{parentName:"li",href:"http://kt.ijs.si/panovp/Default_files/Panov08Combining.pdf"},"3"),"] Panov P., D\u017eeroski S. (2007) Combining Bagging and Random Subspaces to Create Better Ensembles")))}u.isMDXComponent=!0}}]);